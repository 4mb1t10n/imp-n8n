{
  "createdAt": "2025-04-30T08:31:33.882Z",
  "updatedAt": "2025-04-30T08:31:33.882Z",
  "id": "oKJVGvD6v2Nifp9s",
  "name": "/supabase-updated-properties",
  "active": false,
  "nodes": [
    {
      "parameters": {
        "tableId": "changelog",
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "updated_column",
              "fieldValue": "={{ $json.updated_column }}"
            },
            {
              "fieldId": "updated_value",
              "fieldValue": "={{ $json.newValue }}"
            },
            {
              "fieldId": "updated_by",
              "fieldValue": "={{ $('/supabase-updated-properties').item.json.body.record.updated_by }}"
            },
            {
              "fieldId": "updated_table",
              "fieldValue": "={{ $('/supabase-updated-properties').item.json.body.table }}"
            },
            {
              "fieldId": "updated_column_type",
              "fieldValue": "={{ $json.column_type }}"
            },
            {
              "fieldId": "property_id",
              "fieldValue": "={{ $('/supabase-updated-properties').first().json.body.table === \"properties\" ?  $('/supabase-updated-properties').item.json.body.record.id :  null }}"
            }
          ]
        }
      },
      "id": "13137daf-d55d-4877-8c0e-e55ed4da9156",
      "name": "changelog",
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        -80,
        -420
      ],
      "credentials": {
        "supabaseApi": {
          "id": "ljOT7sOtMVrm9WI6",
          "name": "Rent Ready Supabase"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 1
          },
          "conditions": [
            {
              "id": "00f990c9-9187-4105-ad41-69a174a6145a",
              "leftValue": "={{ $json.isDifferent }}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            },
            {
              "id": "f87b8385-75c8-420b-9c11-35b5c8b2a9be",
              "leftValue": "={{ $json.updated_column }}",
              "rightValue": "timestamp_updated",
              "operator": {
                "type": "string",
                "operation": "notContains"
              }
            },
            {
              "id": "52b907a1-ac31-47d6-8131-143d7524d204",
              "leftValue": "={{ $json.updated_column }}",
              "rightValue": "updated_by",
              "operator": {
                "type": "string",
                "operation": "notContains"
              }
            },
            {
              "id": "451ead62-3dee-4199-9e1f-5d7b3e5bc0d7",
              "leftValue": "={{ $json.updated_column }}",
              "rightValue": "id",
              "operator": {
                "type": "string",
                "operation": "notEquals"
              }
            },
            {
              "id": "180ff959-883c-4ee9-863b-75bc5e8fdf81",
              "leftValue": "={{ $json.updated_column }}",
              "rightValue": "starred",
              "operator": {
                "type": "string",
                "operation": "notEquals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "7c0b5373-4521-4039-bfcd-18c37dc06572",
      "name": "Filter",
      "type": "n8n-nodes-base.filter",
      "typeVersion": 2.1,
      "position": [
        -300,
        -420
      ]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "f743914b-f427-48fb-901e-10ee1b71c7f1",
              "name": "table",
              "value": "={{ $json.body.table }}",
              "type": "string"
            },
            {
              "id": "90237df7-4b1c-4463-a076-8f16ed878e74",
              "name": "type",
              "value": "={{ $json.body.type }}",
              "type": "string"
            },
            {
              "id": "5f3ad40b-5195-4845-80b7-dd337c872813",
              "name": "new_record",
              "value": "={{ $json.body.record }}",
              "type": "object"
            },
            {
              "id": "97538103-c349-4463-8ebd-dd9bbbf66c13",
              "name": "old_record",
              "value": "={{ $json.body.old_record }}",
              "type": "object"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -1180,
        -420
      ],
      "id": "a618013c-a60f-412e-90b8-2e600670886d",
      "name": "inputs"
    },
    {
      "parameters": {
        "dataToSave": {
          "values": [
            {
              "key": "record_id",
              "value": "={{ $json.new_record.id }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.executionData",
      "typeVersion": 1,
      "position": [
        -960,
        -420
      ],
      "id": "fa75a637-5a37-47e3-a94a-19cdadade2f3",
      "name": "record_id",
      "alwaysOutputData": true,
      "notesInFlow": true
    },
    {
      "parameters": {
        "jsCode": "function findDifferences(obj1, obj2 = {}) {\n  let differences = [];\n  \n  function getValueType(value) {\n    if (typeof value === 'string') {\n      const date = new Date(value);\n      if (date instanceof Date && !isNaN(date)) return 'timestamp';\n      return 'text';\n    }\n    if (typeof value === 'boolean') return 'boolean';\n    if (typeof value === 'number') return 'number';\n    if (Array.isArray(value)) return 'array';\n    if (value === null) return 'null';\n    if (typeof value === 'object') return 'object';\n    return 'undefined';\n  }\n  \n  for (let key in obj1) {\n    if (JSON.stringify(obj1[key]) !== JSON.stringify(obj2?.[key])) {\n      differences.push({\n        isDifferent: true,\n        updated_column: key,\n        column_type: getValueType(obj1[key]),\n        oldValue: obj2?.[key] ?? null,\n        newValue: obj1[key]\n      });\n    }\n  }\n  \n  if (obj2) {\n    for (let key in obj2) {\n      if (!(key in obj1)) {\n        differences.push({\n          isDifferent: true,\n          updated_column: key,\n          column_type: getValueType(obj2[key]),\n          oldValue: obj2[key],\n          newValue: undefined\n        });\n      }\n    }\n  }\n  \n  // If no differences found, return array with \"no changes\" message\n  if (differences.length === 0) {\n    return [{\n      isDifferent: false,\n      message: \"no changes\"\n    }];\n  }\n  \n  return differences;\n}\n\nconst newObject = $('/supabase-updated-properties').all()[0].json.body.record;\nconst oldObject = $('/supabase-updated-properties').all()[0].json.body.old_record || {};\nconst differences = findDifferences(newObject, oldObject);\nitems = differences.map(diff => ({ json: diff }));\nreturn items;"
      },
      "id": "af7ab7d3-45a3-41db-8f02-57e24292d539",
      "name": "compareData",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -740,
        -420
      ],
      "notes": "The id of each table is supabase needs to be called exactly \"id\""
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://n8n.railway.internal:5678/webhook/scrape-property",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "property_id",
              "value": "={{ $json.property_id }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        580,
        -320
      ],
      "id": "fec0e4f8-b405-4857-8fbb-17ef77c1df09",
      "name": "/scrape-property"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "20fa661f-6e51-46b0-989e-0e34b7fba83e",
              "leftValue": "={{ $json.updated_column }}",
              "rightValue": "scrape_photos",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.filter",
      "typeVersion": 2.2,
      "position": [
        140,
        -320
      ],
      "id": "4d1c62e4-3015-4233-8253-a9e236481f54",
      "name": "scrape_photos"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "20fa661f-6e51-46b0-989e-0e34b7fba83e",
              "leftValue": "={{ $json.updated_column }}",
              "rightValue": "realtor_status",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            },
            {
              "id": "e0adb3d2-8272-414f-9200-7b19f7fcf430",
              "leftValue": "={{ $json.updated_column }}",
              "rightValue": "realtor_list_price",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            },
            {
              "id": "a1667dd0-d48e-4616-80ca-7bdf6dae48ee",
              "leftValue": "={{ $json.updated_column }}",
              "rightValue": "offer_price",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            },
            {
              "id": "8c3a239b-8860-4931-ab0b-98575ce3f413",
              "leftValue": "={{ $json.updated_column }}",
              "rightValue": "contingent_listing_type",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            },
            {
              "id": "de87c68d-2e3f-4b0a-9225-f3aaf99eb57c",
              "leftValue": "={{ $json.updated_column }}",
              "rightValue": "followup_notes",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            },
            {
              "id": "497626f9-60a2-4bf7-a123-14e69a501bd5",
              "leftValue": "={{ $json.updated_column }}",
              "rightValue": "property_status",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "or"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.filter",
      "typeVersion": 2.2,
      "position": [
        140,
        -520
      ],
      "id": "f737dbc9-c7c8-4643-ad21-efc2d904089c",
      "name": "otherColumns"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://n8n.railway.internal:5678/webhook/telegram-property-notification",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "property_id",
              "value": "={{ $json.property_id }}"
            },
            {
              "name": "updated_column",
              "value": "={{ $json.updated_column }}"
            },
            {
              "name": "updated_value",
              "value": "={{ $json.updated_value }}"
            },
            {
              "name": "updated_column_type",
              "value": "={{ $json.updated_column_type }}"
            },
            {
              "name": "updated_by",
              "value": "={{ $json.updated_by }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        580,
        -520
      ],
      "id": "54ad451e-289b-4a8f-ab13-5247a15e8a5d",
      "name": "/telegram-property-notification"
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "supabase-updated-properties",
        "authentication": "headerAuth",
        "options": {}
      },
      "id": "7e5b8f5a-dbf3-47f8-9da3-aedcecbd1ca8",
      "name": "/supabase-updated-properties",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        -1400,
        -420
      ],
      "webhookId": "2ac3d1a9-7334-451c-aa4c-947182f598d5",
      "credentials": {
        "httpHeaderAuth": {
          "id": "KwKIAL5ixwLlPeZY",
          "name": "Supabase Imposbl Header Auth"
        }
      }
    },
    {
      "parameters": {
        "dataToSave": {
          "values": [
            {
              "key": "updated_column",
              "value": "={{ $json.updated_column }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.executionData",
      "typeVersion": 1,
      "position": [
        -520,
        -420
      ],
      "id": "a6785fea-5487-4abd-89c3-68fcf81accc6",
      "name": "updated_column"
    },
    {
      "parameters": {
        "dataToSave": {
          "values": [
            {
              "key": "=flow",
              "value": "=notification"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.executionData",
      "typeVersion": 1,
      "position": [
        360,
        -520
      ],
      "id": "32fc4870-f896-4782-a26e-ae557abeb226",
      "name": "flow: notification",
      "notesInFlow": true
    },
    {
      "parameters": {
        "dataToSave": {
          "values": [
            {
              "key": "flow",
              "value": "scrape-photos"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.executionData",
      "typeVersion": 1,
      "position": [
        360,
        -320
      ],
      "id": "95cb91d9-2044-4a76-b1f0-e381dc6a1df4",
      "name": "flow: scrape-photos",
      "notesInFlow": true
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://n8n.railway.internal:5678/webhook/telegram-property-topic",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "property_id",
              "value": "={{ $('inputs').item.json.new_record.id }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        800,
        -520
      ],
      "id": "e89e7ecd-4806-4deb-988d-dd5e0c445edc",
      "name": "/telegram-property-topic",
      "disabled": true,
      "onError": "continueRegularOutput"
    }
  ],
  "connections": {
    "changelog": {
      "main": [
        [
          {
            "node": "otherColumns",
            "type": "main",
            "index": 0
          },
          {
            "node": "scrape_photos",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Filter": {
      "main": [
        [
          {
            "node": "changelog",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "inputs": {
      "main": [
        [
          {
            "node": "record_id",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "record_id": {
      "main": [
        [
          {
            "node": "compareData",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "compareData": {
      "main": [
        [
          {
            "node": "updated_column",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "/scrape-property": {
      "main": [
        []
      ]
    },
    "scrape_photos": {
      "main": [
        [
          {
            "node": "flow: scrape-photos",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "otherColumns": {
      "main": [
        [
          {
            "node": "flow: notification",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "/telegram-property-notification": {
      "main": [
        [
          {
            "node": "/telegram-property-topic",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "/supabase-updated-properties": {
      "main": [
        [
          {
            "node": "inputs",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "updated_column": {
      "main": [
        [
          {
            "node": "Filter",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "flow: notification": {
      "main": [
        [
          {
            "node": "/telegram-property-notification",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "flow: scrape-photos": {
      "main": [
        [
          {
            "node": "/scrape-property",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "/telegram-property-topic": {
      "main": [
        []
      ]
    }
  },
  "staticData": null,
  "meta": null,
  "pinData": null,
  "versionId": "586b5fa7-a022-4b6e-8caa-96eda0d59d70",
  "triggerCount": 0,
  "tags": []
}