{
  "active": true,
  "connections": {
    "Validate Address": {
      "main": [
        [
          {
            "node": "Filter",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "400 - invalid address",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Filter": {
      "main": [
        [
          {
            "node": "loopInput",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "apifyQuery": {
      "main": [
        [
          {
            "node": "/callApify",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "400 - invalid address": {
      "main": [
        []
      ]
    },
    "updated property": {
      "main": [
        [
          {
            "node": "apifyQuery",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "inputs-properties-post": {
      "main": [
        [
          {
            "node": "properties-post",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "properties-post": {
      "main": [
        [
          {
            "node": "splitProperties",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "splitProperties": {
      "main": [
        [
          {
            "node": "address not empty",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "address not empty": {
      "main": [
        [
          {
            "node": "Validate Address",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "update tags?": {
      "main": [
        [
          {
            "node": "/tags",
            "type": "main",
            "index": 0
          }
        ],
        []
      ]
    },
    "/tags": {
      "main": [
        []
      ]
    },
    "loopInput": {
      "main": [
        [
          {
            "node": "process-validated-property>",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Try create new": {
      "main": [
        [
          {
            "node": "updated property",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Try to update",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Try to update": {
      "main": [
        [
          {
            "node": "updated property",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "S8 Notifications",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "S8 Notifications": {
      "main": [
        []
      ]
    },
    "/process-validated-property": {
      "main": [
        [
          {
            "node": "inputs1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "process-validated-property>": {
      "main": [
        [
          {
            "node": "200",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "process-validated-property": {
      "main": [
        [
          {
            "node": "Try create new",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "inputs1": {
      "main": [
        [
          {
            "node": "process-validated-property",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "/new-property": {
      "main": [
        [
          {
            "node": "inputs-properties-post",
            "type": "main",
            "index": 0
          }
        ],
        []
      ]
    },
    "/telegram-property-topic": {
      "main": [
        [
          {
            "node": "update tags?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "/callApify": {
      "main": [
        [
          {
            "node": "/telegram-property-topic",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2025-03-28T08:58:34.161Z",
  "execution_id": "23318",
  "id": "5l82Xz5lpYQrrg5V",
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "name": "/properties POST",
  "nodes": [
    {
      "parameters": {
        "respondWith": "noData",
        "options": {
          "responseCode": 200
        }
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [
        -1440,
        -1820
      ],
      "id": "1b0154b9-e045-47d0-883c-1841c431189b",
      "name": "200"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://addressvalidation.googleapis.com/v1:validateAddress",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "key",
              "value": "AIzaSyCgbOWtS3Xh6jTVroOqfolJdcthEPqlm-E"
            }
          ]
        },
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"address\": {\n    \"regionCode\": \"US\",\n        \"addressLines\": [\"{{ $json.address }}\"]\n  }\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -2320,
        -1720
      ],
      "id": "eb805728-93e2-43fd-8429-d0c5752415f7",
      "name": "Validate Address",
      "alwaysOutputData": false,
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "86577394-7e6a-4a3f-8d0f-04e445f280d1",
              "leftValue": "={{ $json.result.verdict.inputGranularity }}",
              "rightValue": "PREMISE",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.filter",
      "typeVersion": 2.2,
      "position": [
        -2100,
        -1820
      ],
      "id": "3c24cce9-ecb3-49cc-8e35-6d99c4485cb2",
      "name": "Filter"
    },
    {
      "parameters": {
        "jsCode": "const items = $input.all();\n\nconst formattedRequest = {\n  addresses: [],\n  extractBuildingUnits: \"for_sale\",\n  propertyStatus: \"FOR_SALE\",\n  startUrls: []\n};\n\nitems.forEach(item => {\n  // Access the properties through the json property in n8n\n  const property = item.json;\n  \n  if (property.zillow_url && property.zillow_url.includes('zillow.com')) {\n    formattedRequest.startUrls.push({\n      url: property.zillow_url,\n      method: \"GET\"\n    });\n  } else {\n    const fullAddress = `${property.address_street}, ${property.address_city}, ${property.address_state} ${property.address_zip}`;\n    formattedRequest.addresses.push(fullAddress);\n  }\n});\n\nreturn formattedRequest;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -2100,
        -1360
      ],
      "id": "14e68a1d-9538-497c-8cb6-599196c53c18",
      "name": "apifyQuery"
    },
    {
      "parameters": {
        "respondWith": "text",
        "responseBody": "=Invalid input address",
        "options": {
          "responseCode": 400
        }
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [
        -2100,
        -1620
      ],
      "id": "22f391ca-f9b2-4d9e-a1c9-4187f1eb7099",
      "name": "400 - invalid address"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "loose",
            "version": 2
          },
          "conditions": [
            {
              "id": "9a4970ec-467f-43ad-8e3d-632141a1a5fe",
              "leftValue": "={{ $('inputs1').item.json.tags }}",
              "rightValue": "",
              "operator": {
                "type": "array",
                "operation": "notEmpty",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "looseTypeValidation": true,
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -1440,
        -1360
      ],
      "id": "4c80a827-b37a-4eca-8995-2b15768c077d",
      "name": "update tags?"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": []
        },
        "includeOtherFields": true,
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -2320,
        -1360
      ],
      "id": "40967ab6-225e-45f1-9089-4c4d86bff3ef",
      "name": "updated property"
    },
    {
      "parameters": {
        "mode": "raw",
        "jsonOutput": "={{\n  {\n    \"addresses\": $json.query.addresses,\n    \"status\": $json.query.status,\n    \"realtor\": $json.query.realtor,\n    \"tags\": $json.query.tags,\n    \"notes\": $json.query.notes,\n    \"user\": $json.query.user\n  }\n}}",
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -3200,
        -1720
      ],
      "id": "a3d39ad2-64d4-419d-8123-951278a66422",
      "name": "inputs-properties-post",
      "notesInFlow": false
    },
    {
      "parameters": {
        "dataToSave": {
          "values": [
            {
              "key": "w",
              "value": "properties-post"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.executionData",
      "typeVersion": 1,
      "position": [
        -2980,
        -1720
      ],
      "id": "28a7ad29-e6ca-4735-81f9-342c58379b57",
      "name": "properties-post",
      "notesInFlow": true,
      "notes": "w: properties-post"
    },
    {
      "parameters": {
        "jsCode": "// Get the input data\nconst addresses = $input.first().json.addresses;\n\n// Function to handle array or string that looks like an array\nfunction processArrayInput(addresses) {\n  if (!addresses) return []; // Handle null, undefined, or empty string\n\n  if (typeof addresses === \"string\") {\n    // If it's empty, return empty array\n    if (addresses.trim() === \"\") return [];\n\n    try {\n      // Try to parse it as JSON\n      return JSON.parse(addresses);\n    } catch (e) {\n      // If parsing fails, assume it's a comma-separated string\n      return addresses\n        .split(\"\\n\")\n        .map((item) => item.trim())\n        .filter((item) => item !== \"\");\n    }\n  } else if (Array.isArray(addresses)) {\n    return addresses;\n  }\n  return [];\n}\n\n// Process the addresses\nconst processedAddresses = processArrayInput(addresses);\n\n// If no addresses, return empty array to prevent N8N errors\nif (processedAddresses.length === 0) {\n  return [];\n}\n\n// Return one item per tag\nreturn processedAddresses.map((address) => ({\n  json: {\n    address: address\n  },\n}));\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -2760,
        -1720
      ],
      "id": "495ccca8-c6c6-43aa-b1b0-5f31086c4507",
      "name": "splitProperties"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "20b8e23a-cad9-46f1-959f-03233db5abac",
              "leftValue": "={{ $json.address }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "notEmpty",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.filter",
      "typeVersion": 2.2,
      "position": [
        -2540,
        -1720
      ],
      "id": "add5ce55-b6b4-43ea-9c96-ec45cfe5a1c4",
      "name": "address not empty"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://n8n.railway.internal:5678/webhook/tags",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "property_id",
              "value": "={{ $('updated property').first().json.id }}"
            },
            {
              "name": "tags",
              "value": "={{ $('inputs1').item.json.tags }}"
            },
            {
              "name": "add_or_replace",
              "value": "add"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -1220,
        -1360
      ],
      "id": "19e9d0b5-6d9d-43ee-a519-c66ea449b4ac",
      "name": "/tags",
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "mode": "raw",
        "jsonOutput": "={{\n  {\n    \"address_street\": $json.result.address.postalAddress.addressLines[0],\n    \"address_city\": $json.result.address.postalAddress.locality,\n    \"address_state\": $json.result.address.postalAddress.administrativeArea,\n    \"address_zip\": $json.result.uspsData.standardizedAddress.zipCode,\n    \"address_county\": $json.result.uspsData.county,\n    \"coord_lat\": $json.result.geocode.location.latitude,\n    \"coord_lng\": $json.result.geocode.location.longitude,\n    \"google_place_id\": $json.result.geocode.placeId,\n    \"property_status\": $('inputs-properties-post').item.json.status,\n    \"updated_by\": $('inputs-properties-post').item.json.user,\n    \"realtor_assigned\": $('inputs-properties-post').item.json.realtor,\n    \"tags\": $('inputs-properties-post').item.json.tags,\n  \"notes\": $('inputs-properties-post').item.json.notes\n  }\n}}",
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -1880,
        -1820
      ],
      "id": "f1ec1a68-c442-47ed-a8e1-c2927816c7d0",
      "name": "loopInput"
    },
    {
      "parameters": {
        "tableId": "properties",
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "address_street",
              "fieldValue": "={{ $json.address_street }}"
            },
            {
              "fieldId": "address_city",
              "fieldValue": "={{ $json.address_city }}"
            },
            {
              "fieldId": "address_state",
              "fieldValue": "={{ $json.address_state }}"
            },
            {
              "fieldId": "address_zip",
              "fieldValue": "={{ $json.address_zip }}"
            },
            {
              "fieldId": "coord_lat",
              "fieldValue": "={{ $json.coord_lat }}"
            },
            {
              "fieldId": "coord_lng",
              "fieldValue": "={{ $json.coord_lng }}"
            },
            {
              "fieldId": "address_county",
              "fieldValue": "={{ $json.address_county }}"
            },
            {
              "fieldId": "google_place_id",
              "fieldValue": "={{ $json.google_place_id }}"
            },
            {
              "fieldId": "updated_by",
              "fieldValue": "={{ $json.updated_by }}"
            },
            {
              "fieldId": "property_status",
              "fieldValue": "={{ $json.property_status }}"
            },
            {
              "fieldId": "timestamp_created",
              "fieldValue": "={{ $now }}"
            },
            {
              "fieldId": "timestamp_updated",
              "fieldValue": "={{ $now }}"
            },
            {
              "fieldId": "realtor_assigned",
              "fieldValue": "={{ $json.realtor_assigned }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        -2760,
        -1260
      ],
      "id": "eb836506-956b-4d50-8b87-d848107d0e79",
      "name": "Try create new",
      "alwaysOutputData": false,
      "credentials": {
        "supabaseApi": {
          "id": "hN8Yj6BvjJqfKMnH",
          "name": "Rent Ready Supabase"
        }
      },
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "operation": "update",
        "tableId": "properties",
        "matchType": "allFilters",
        "filters": {
          "conditions": [
            {
              "keyName": "address_street",
              "condition": "eq",
              "keyValue": "={{ $json.address_street }}"
            },
            {
              "keyName": "address_city",
              "condition": "eq",
              "keyValue": "={{ $json.address_city }}"
            },
            {
              "keyName": "address_state",
              "condition": "eq",
              "keyValue": "={{ $json.address_state }}"
            },
            {
              "keyName": "address_zip",
              "condition": "eq",
              "keyValue": "={{ $json.address_zip }}"
            }
          ]
        },
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "coord_lat",
              "fieldValue": "={{ $json.coord_lat }}"
            },
            {
              "fieldId": "coord_lng",
              "fieldValue": "={{ $json.coord_lng }}"
            },
            {
              "fieldId": "address_county",
              "fieldValue": "={{ $json.address_county }}"
            },
            {
              "fieldId": "google_place_id",
              "fieldValue": "={{ $json.google_place_id }}"
            },
            {
              "fieldId": "updated_by",
              "fieldValue": "={{ $json.updated_by }}"
            },
            {
              "fieldId": "property_status",
              "fieldValue": "={{ $json.property_status }}"
            },
            {
              "fieldId": "timestamp_updated",
              "fieldValue": "={{ $now }}"
            },
            {
              "fieldId": "realtor_assigned",
              "fieldValue": "={{ $json.realtor_assigned }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        -2540,
        -1185
      ],
      "id": "fda524a0-f54c-4fa2-bec3-cfd0aeb4b992",
      "name": "Try to update",
      "alwaysOutputData": true,
      "credentials": {
        "supabaseApi": {
          "id": "hN8Yj6BvjJqfKMnH",
          "name": "Rent Ready Supabase"
        }
      },
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "chatId": "-1002250368392",
        "text": "=<b>Server Error</b>\nUnable to upsert new record for property: {{ $json.address_street }} | {{ $json.address_zip }}\n\nWorkflow: {{ $workflow.name }}\nExecution ID: <a href=\"https://s8s.up.railway.app/workflow/5l82Xz5lpYQrrg5V/executions/{{ $execution.id }}\">{{ $execution.id }}</a>",
        "additionalFields": {
          "appendAttribution": false,
          "parse_mode": "HTML",
          "message_thread_id": 1015
        }
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        -2320,
        -1135
      ],
      "id": "334249c4-bd85-4f06-920b-6f6fa4ac175e",
      "name": "S8 Notifications",
      "webhookId": "bf1c5a21-07eb-49f9-bdab-163ec652c5d0",
      "credentials": {
        "telegramApi": {
          "id": "5EhmVCbyRMyj9grg",
          "name": "P0m0shnik11_Bot"
        }
      }
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "process-validated-property",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        -3420,
        -1260
      ],
      "id": "f4eed5b5-cc3a-44ec-857f-750648294c25",
      "name": "/process-validated-property",
      "webhookId": "3ac1c164-a521-4b11-97c6-7b223d38d9f0"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://n8n.railway.internal:5678/webhook/process-validated-property",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "property",
              "value": "={{ $json }}"
            }
          ]
        },
        "options": {
          "allowUnauthorizedCerts": true
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -1660,
        -1820
      ],
      "id": "42097747-5491-4c6c-98d6-ba7b12adacb8",
      "name": "process-validated-property>",
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "dataToSave": {
          "values": [
            {
              "key": "w",
              "value": "process-validated-property"
            },
            {
              "key": "property",
              "value": "={{ $json.address_street }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.executionData",
      "typeVersion": 1,
      "position": [
        -2980,
        -1260
      ],
      "id": "82958185-c841-4683-80a7-c3bbf892c050",
      "name": "process-validated-property"
    },
    {
      "parameters": {
        "mode": "raw",
        "jsonOutput": "=\n  {\n    \"address_street\": \"{{ $json.body.property.address_street }}\",\n    \"address_city\": \"{{$json.body.property.address_city}}\",\n    \"address_state\": \"{{$json.body.property.address_state}}\",\n    \"address_zip\": \"{{$json.body.property.address_zip}}\",\n    \"address_county\": \"{{$json.body.property.address_county}}\",\n    \"coord_lat\": \"{{$json.body.property.coord_lat}}\",\n    \"coord_lng\": \"{{$json.body.property.coord_lng}}\",\n    \"google_place_id\": \"{{$json.body.property.google_place_id}}\",\n    \"property_status\": \"{{$json.body.property.property_status}}\",\n    \"updated_by\": \"{{$json.body.property.updated_by}}\",\n    \"realtor_assigned\": \"{{$json.body.property.realtor_assigned}}\",\n    \"tags\": \"{{$json.body.property.tags}}\",\n    \"notes\": \"{{$json.body.property.notes}}\"\n  }\n\n",
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -3200,
        -1260
      ],
      "id": "de524584-11c8-46cd-a695-afef13b44a81",
      "name": "inputs1",
      "notesInFlow": true,
      "notes": "optional:\nrealtor\ntags"
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "new-property",
        "responseMode": "responseNode",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        -3420,
        -1720
      ],
      "id": "35aaaffc-4ead-4489-98f9-47bb45778c2a",
      "name": "/new-property",
      "webhookId": "07639ed8-3eb6-45c4-808a-4f563e7dd0ff"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://n8n.railway.internal:5678/webhook/telegram-property-topic",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "property_id",
              "value": "={{ $('updated property').item.json.id }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -1660,
        -1360
      ],
      "id": "206a7259-a9bb-45cc-96de-809e2a6ad2bd",
      "name": "/telegram-property-topic",
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.apify.com/v2/acts/maxcopell~zillow-detail-scraper/runs",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "token",
              "value": "apify_api_eBcJIT4Z3eJhNHRL1UFtko2cVhff8i4fqE6a"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ $json }}",
        "options": {
          "timeout": 300000
        }
      },
      "id": "1a029e2d-5513-467c-9c5e-71469e47feb5",
      "name": "/callApify",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -1880,
        -1360
      ],
      "retryOnFail": true,
      "waitBetweenTries": 3000,
      "alwaysOutputData": true,
      "maxTries": 2,
      "onError": "continueRegularOutput"
    }
  ],
  "notes": "",
  "pinData": {
    "inputs-properties-post": [
      {
        "json": {
          "addresses": "335 Suder Ave, Toledo, OH 43611",
          "status": "Walkthrough",
          "realtor": "whitneynbarlow@gmail.com",
          "tags": "[]",
          "notes": "No photos online. Possibly a rehab. Confirm if its a good area with Whitney and Tege",
          "user": "alex+dev@imposbl.com"
        }
      }
    ],
    "/process-validated-property": [
      {
        "json": {
          "headers": {
            "accept": "application/json,text/html,application/xhtml+xml,application/xml,text/*;q=0.9, image/*;q=0.8, */*;q=0.7",
            "content-type": "application/json",
            "user-agent": "axios/1.7.4",
            "content-length": "455",
            "accept-encoding": "gzip, compress, deflate, br",
            "host": "n8n.railway.internal:5678",
            "connection": "keep-alive"
          },
          "params": {},
          "query": {},
          "body": {
            "property": {
              "address_street": "335 Suder Ave",
              "address_city": "Toledo",
              "address_state": "OH",
              "address_zip": "43611",
              "address_county": "LUCAS",
              "coord_lat": 41.6854902,
              "coord_lng": -83.4905467,
              "google_place_id": "ChIJyw9YBMaDO4gR55Ocx-0E3xg",
              "property_status": "Walkthrough",
              "updated_by": "alex+dev@imposbl.com",
              "realtor_assigned": "whitneynbarlow@gmail.com",
              "tags": "[]",
              "notes": "No photos online. Possibly a rehab. Confirm if its a good area with Whitney and Tege"
            }
          },
          "webhookUrl": "https://s8s.up.railway.app/webhook/process-validated-property",
          "executionMode": "production"
        }
      }
    ],
    "inputs1": [
      {
        "json": {
          "address_street": "335 Suder Ave",
          "address_city": "Toledo",
          "address_state": "OH",
          "address_zip": "43611",
          "address_county": "LUCAS",
          "coord_lat": "41.6854902",
          "coord_lng": "-83.4905467",
          "google_place_id": "ChIJyw9YBMaDO4gR55Ocx-0E3xg",
          "property_status": "Walkthrough",
          "updated_by": "alex+dev@imposbl.com",
          "realtor_assigned": "whitneynbarlow@gmail.com",
          "tags": "['Bundle 1']",
          "notes": "No photos online. Possibly a rehab. Confirm if its a good area with Whitney and Tege"
        }
      }
    ]
  },
  "settings": {
    "executionOrder": "v1",
    "saveManualExecutions": false,
    "callerPolicy": "workflowsFromSameOwner"
  },
  "staticData": {
    "node:Schedule Trigger": {
      "recurrenceRules": [
        12
      ]
    },
    "node:Schedule Trigger1": {
      "recurrenceRules": [
        0
      ]
    },
    "node:chron": {
      "recurrenceRules": [
        12
      ]
    }
  },
  "tags": [],
  "triggerCount": 2,
  "updatedAt": "2025-04-10T22:53:00.645Z",
  "versionId": "b441aa26-178c-4b11-9c72-1aa7425da8ec"
}