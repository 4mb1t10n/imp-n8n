{
  "active": true,
  "connections": {
    "record-get": {
      "main": [
        [
          {
            "node": "recordGetQuery",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "recordGetQuery": {
      "main": [
        [
          {
            "node": "Get record",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get record": {
      "main": [
        [
          {
            "node": "Respond w Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "inputs": {
      "main": [
        [
          {
            "node": "record-get",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "/records-get": {
      "main": [
        [
          {
            "node": "Filter",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Filter": {
      "main": [
        [
          {
            "node": "inputs",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2025-04-10T00:56:33.675Z",
  "execution_id": "27736",
  "id": "vKuRvtLXd2DYrRqE",
  "meta": null,
  "name": "/records-get",
  "nodes": [
    {
      "parameters": {
        "dataToSave": {
          "values": [
            {
              "key": "select_table",
              "value": "={{ $json.select_table }}"
            },
            {
              "key": "search_values",
              "value": "={{ $json.search_values }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.executionData",
      "typeVersion": 1,
      "position": [
        -380,
        -20
      ],
      "id": "33a305d0-84f7-4afd-98ec-f742423d3362",
      "name": "record-get",
      "notesInFlow": true,
      "notes": "w: record-get"
    },
    {
      "parameters": {
        "jsCode": "// Get the input data\nconst inputData = $input.first().json;\nconst table = inputData.select_table;\nconst columns = inputData.select_columns;\nconst searchColumns = inputData.search_columns;\nconst searchValues = inputData.search_values;\nconst sortColumn = inputData.sort_column;\nconst sortDirection = inputData.sort_direction;\n\n// Start with the base URL and table\nlet queryString = \"https://qyyyacmhcwqdxqnhgqmr.supabase.co/rest/v1/\" + table;\n\n// Function to handle array or string that looks like an array\nfunction processArrayInput(input) {\n  try {\n    // Explicitly check for null and undefined\n    if (input === null || input === undefined) return [];\n    \n    if (typeof input === 'string') {\n      // If it's empty, return empty array\n      if (input.trim() === '') return [];\n      \n      try {\n        // Try to parse it as JSON\n        return JSON.parse(input);\n      } catch (e) {\n        // If parsing fails, assume it's a comma-separated string\n        return input.split(',').map(item => item.trim()).filter(item => item !== '');\n      }\n    } else if (Array.isArray(input)) {\n      return input;\n    }\n    return [];\n  } catch (error) {\n    // If any unexpected error occurs, return empty array as fallback\n    return [];\n  }\n}\n\n// Initialize query parameters\nlet params = [];\n\n// Process columns if they exist - add safety check\nlet processedColumns = [];\ntry {\n  processedColumns = processArrayInput(columns) || [];\n} catch (error) {\n  processedColumns = [];\n}\n\n// Now check the length with safety\nif (Array.isArray(processedColumns) && processedColumns.length > 0) {\n  params.push(\"select=\" + processedColumns.join(','));\n} else {\n  // If no columns specified, select all columns\n  params.push(\"select=*\");\n}\n\n// Process search columns and values - with similar safety checks\nlet processedSearchColumns = [];\nlet processedSearchValues = [];\ntry {\n  processedSearchColumns = processArrayInput(searchColumns) || [];\n  processedSearchValues = processArrayInput(searchValues) || [];\n} catch (error) {\n  processedSearchColumns = [];\n  processedSearchValues = [];\n}\n\n// Extra safety check before accessing length properties\nif (Array.isArray(processedSearchColumns) && Array.isArray(processedSearchValues) && \n    processedSearchColumns.length > 0 && processedSearchValues.length > 0) {\n  // Handle case where we have equal number of columns and values\n  if (processedSearchColumns.length === processedSearchValues.length) {\n    // Create individual filters for each column-value pair\n    for (let i = 0; i < processedSearchColumns.length; i++) {\n      params.push(`${processedSearchColumns[i]}=eq.${processedSearchValues[i]}`);\n    }\n  } else {\n    // If unequal lengths, just use as many pairs as we can\n    const pairCount = Math.min(processedSearchColumns.length, processedSearchValues.length);\n    for (let i = 0; i < pairCount; i++) {\n      params.push(`${processedSearchColumns[i]}=eq.${processedSearchValues[i]}`);\n    }\n  }\n}\n\n// Process sorting if sort_column exists\nif (sortColumn) {\n  // Validate sort direction, default to asc if invalid\n  const direction = (sortDirection && ['asc', 'desc'].includes(sortDirection.toLowerCase())) \n    ? sortDirection.toLowerCase() \n    : 'asc';\n  \n  // Add order parameter\n  params.push(`order=${sortColumn}.${direction}`);\n}\n\n// Add parameters to query string\nif (params.length > 0) {\n  queryString += \"?\" + params.join('&');\n}\n\n// Return data in the format N8N expects\nreturn [{\n  json: {\n    queryString: queryString\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -160,
        -20
      ],
      "id": "1de1ab47-19df-4409-9aa8-158fb35b2982",
      "name": "recordGetQuery"
    },
    {
      "parameters": {
        "url": "={{ $json.queryString }}",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "supabaseApi",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        60,
        -20
      ],
      "id": "db074b96-d41f-4255-87ee-a226fe419c6b",
      "name": "Get record",
      "alwaysOutputData": true,
      "credentials": {
        "httpHeaderAuth": {
          "id": "KwKIAL5ixwLlPeZY",
          "name": "Supabase Imposbl Header Auth"
        },
        "supabaseApi": {
          "id": "hN8Yj6BvjJqfKMnH",
          "name": "Rent Ready Supabase"
        }
      }
    },
    {
      "parameters": {
        "respondWith": "allIncomingItems",
        "options": {
          "responseCode": 200
        }
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [
        280,
        -20
      ],
      "id": "b21376a3-e683-43f4-9379-8cf3f3d82ae2",
      "name": "Respond w Data"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "03333ad5-f3d0-4513-be78-79daf97f9346",
              "name": "select_table",
              "value": "={{ $json.query.select_table }}",
              "type": "string"
            },
            {
              "id": "03c1d52a-2479-4478-8a62-1e67da1040d9",
              "name": "select_columns",
              "value": "={{ $json.query.select_columns }}",
              "type": "string"
            },
            {
              "id": "43b1625d-e963-45b5-abe3-f07d086c6382",
              "name": "search_columns",
              "value": "={{ $json.query.search_columns }}",
              "type": "string"
            },
            {
              "id": "8b8ff294-77f2-4086-81a5-6d93ef36a208",
              "name": "search_values",
              "value": "={{ $json.query.search_values }}",
              "type": "string"
            },
            {
              "id": "4fc09576-ee3e-4347-b2d6-5f33021f2591",
              "name": "sort_column",
              "value": "={{ $json.query.sort_column }}",
              "type": "string"
            },
            {
              "id": "27fd7c10-729a-43ae-8a91-3ffa85a3881c",
              "name": "sort_direction",
              "value": "={{ $json.query.sort_direction }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -600,
        -20
      ],
      "id": "3d51f716-001e-4d32-b7a2-2adae3c74a6d",
      "name": "inputs"
    },
    {
      "parameters": {
        "path": "records-get",
        "responseMode": "responseNode",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        -1040,
        -20
      ],
      "id": "4a7e86cb-5e46-4157-a663-9ef733483172",
      "name": "/records-get",
      "webhookId": "f838d05f-0c99-42dd-a099-c038893f8b84"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "1e446b65-af8b-4eeb-a5c6-eeff2aed5082",
              "leftValue": "",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.filter",
      "typeVersion": 2.2,
      "position": [
        -820,
        -20
      ],
      "id": "d221d934-afb8-47a9-866c-7ecb3802ade9",
      "name": "Filter"
    }
  ],
  "notes": "",
  "pinData": {
    "/records-get": [
      {
        "json": {
          "headers": {
            "accept-encoding": "gzip",
            "user-agent": "ReactorNetty/1.1.22",
            "host": "n8n.railway.internal:5678",
            "accept": "*/*"
          },
          "params": {},
          "query": {
            "select_table": "changelog",
            "select_columns": "null",
            "search_columns": "[\"property_id\",\"updated_column\"]",
            "search_values": "[624,\"followup_notes\"]",
            "sort_column": "id",
            "sort_direction": "asc"
          },
          "body": {},
          "webhookUrl": "https://s8s.up.railway.app/webhook/records-get",
          "executionMode": "production"
        }
      }
    ]
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [],
  "triggerCount": 1,
  "updatedAt": "2025-04-10T18:18:40.262Z",
  "versionId": "9bfd1b24-198a-4a4e-bea0-720f6945a281"
}