{
  "active": true,
  "connections": {
    "Get tasks": {
      "main": [
        [
          {
            "node": "empty?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "tasksQuery": {
      "main": [
        [
          {
            "node": "Get tasks",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "add status": {
      "main": [
        [
          {
            "node": "add status color",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "empty?": {
      "main": [
        [
          {
            "node": "Respond w empty tasks",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "add status",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "add status color": {
      "main": [
        [
          {
            "node": "Respond w tasks",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "/get-tasks": {
      "main": [
        [
          {
            "node": "inputs",
            "type": "main",
            "index": 0
          }
        ],
        []
      ]
    },
    "inputs": {
      "main": [
        [
          {
            "node": "tasksQuery",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2025-03-30T16:18:22.495Z",
  "execution_id": "24015",
  "id": "K30PWfMkvHZTKYC3",
  "meta": null,
  "name": "/get-tasks",
  "nodes": [
    {
      "parameters": {
        "url": "=https://qyyyacmhcwqdxqnhgqmr.supabase.co/rest/v1/view_tasks?{{ $json.queryString }}",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "supabaseApi",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -920,
        0
      ],
      "id": "0d56b9c9-bf89-47b5-a1e8-7913fd4cf738",
      "name": "Get tasks",
      "alwaysOutputData": true,
      "credentials": {
        "httpHeaderAuth": {
          "id": "KwKIAL5ixwLlPeZY",
          "name": "Supabase Imposbl Header Auth"
        },
        "supabaseApi": {
          "id": "hN8Yj6BvjJqfKMnH",
          "name": "Rent Ready Supabase"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Get the input data\nconst inputData = $input.first().json;\n// Start with the select parameter\nlet queryString = \"select=*\";\n// Function to handle array, string, or single value inputs\nfunction processArrayInput(input) {\n  // If null, undefined, or string \"null\", return empty array\n  if (input === null || input === undefined || input === \"null\") {\n    return [];\n  }\n  \n  // If it's already an array, filter out null values\n  if (Array.isArray(input)) {\n    return input.filter(item => item !== null && item !== \"null\");\n  }\n  \n  // If it's a string that looks like JSON, try to parse it\n  if (typeof input === 'string') {\n    try {\n      const parsed = JSON.parse(input);\n      // If parsing succeeded and result is an array, filter out null values\n      if (Array.isArray(parsed)) {\n        return parsed.filter(item => item !== null && item !== \"null\");\n      }\n      // If parsing succeeded but result is not an array, check if it's null\n      return parsed === null || parsed === \"null\" ? [] : [parsed];\n    } catch (e) {\n      // If parsing failed, treat it as a single value unless it's \"null\"\n      return input === \"null\" ? [] : [input];\n    }\n  }\n  \n  // For any other type (number, boolean, etc.), wrap in array\n  return [input];\n}\n// Process assigned users - URL encode each email address\nif (inputData.assigned && inputData.assigned !== \"null\") {\n  const assigned = processArrayInput(inputData.assigned);\n  if (assigned.length > 0) {\n    const assignedList = \"(\" + assigned.map(user => `\"${encodeURIComponent(user)}\"`).join(\",\") + \")\";\n    queryString += \"&assigned_to=in.\" + assignedList;\n  }\n}\n// Process snooze status\nif (inputData.snooze && inputData.snooze !== \"null\") {\n  const snoozeStatus = processArrayInput(inputData.snooze);\n  if (snoozeStatus.length > 0) {\n    if (snoozeStatus.includes(\"Active\") && !snoozeStatus.includes(\"Snoozed\")) {\n      // Active: timestamp_snooze is null or in the past\n      queryString += \"&or=(timestamp_snooze.is.null,timestamp_snooze.lt.now)\";\n    } else if (!snoozeStatus.includes(\"Active\") && snoozeStatus.includes(\"Snoozed\")) {\n      // Snoozed: timestamp_snooze is in the future\n      queryString += \"&timestamp_snooze=gt.now\";\n    }\n  }\n}\n// Process priorities\nif (inputData.priorities && inputData.priorities !== \"null\") {\n  const priorities = processArrayInput(inputData.priorities);\n  if (priorities.length > 0) {\n    const prioritiesList = \"(\" + priorities.join(\",\") + \")\";\n    queryString += \"&priority=in.\" + prioritiesList;\n  }\n}\n// Process properties\nif (inputData.properties && inputData.properties !== \"null\") {\n  const properties = processArrayInput(inputData.properties);\n  if (properties.length > 0) {\n    const propertiesList = \"(\" + properties.join(\",\") + \")\";\n    queryString += \"&property_id=in.\" + propertiesList;\n  }\n}\n// Process completed status\nif (inputData.completed && inputData.completed !== \"null\") {\n  const completed = processArrayInput(inputData.completed);\n  if (completed.length > 0) {\n    const completedList = \"(\" + completed.map(status => `${status}`).join(\",\") + \")\";\n    queryString += \"&completed=in.\" + completedList;\n  }\n}\n\n// Process flagged status\nif (inputData.flagged !== undefined && inputData.flagged !== null && inputData.flagged !== \"\") {\n  // Convert string \"true\"/\"false\" to boolean if needed\n  const flaggedValue = inputData.flagged === \"true\" ? true : \n                      inputData.flagged === \"false\" ? false : \n                      inputData.flagged;\n  \n  // Only add to query if it's a boolean value\n  if (typeof flaggedValue === 'boolean') {\n    queryString += flaggedValue ? \"&flagged=is.true\" : \"&flagged=is.false\";\n  }\n}\n\n// Get primary sort column and direction, or use defaults\nconst sortColumn = inputData.sort_column || \"address_simple\";\nconst sortDirection = inputData.sort_direction || \"asc\";\n\n// Add sorting to the query string with two layers of ordering\n// First by the primary sort column, then by assigned_to\nqueryString += `&order=${sortColumn}.${sortDirection},assigned_to.asc`;\n\n// Return data in the format N8N expects\nreturn [{\n  json: {\n    queryString: queryString\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1140,
        0
      ],
      "id": "176a375b-e299-4909-aabb-b826b2730836",
      "name": "tasksQuery"
    },
    {
      "parameters": {
        "respondWith": "allIncomingItems",
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [
        -40,
        100
      ],
      "id": "2a27c1c0-4fb3-45e6-b2cd-26a8c44ae0f5",
      "name": "Respond w tasks"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "d3e7e2ea-3eb6-4146-82da-45d5c29bf69d",
              "name": "status",
              "value": "={{(() => {\n  // Outer try/catch to ensure we always return a string\n  try {\n    // Check if $json exists and is valid\n    if (!$json) return \"Active\";\n    \n    // Type check and null check\n    if (typeof $json !== 'object') return \"Active\";\n    \n    // Check for completed status safely\n    if ($json.completed === true) return \"Completed\";\n    \n    // Create current date safely\n    let now;\n    try {\n      now = new Date();\n      // Verify date is valid\n      if (isNaN(now.getTime())) now = new Date(); // Try again if invalid\n      if (isNaN(now.getTime())) return \"Active\"; // Last resort if date creation fails\n    } catch (e) {\n      return \"Active\"; // Return active if date creation throws\n    }\n    \n    // Check for snooze status with multiple safety checks\n    try {\n      if ($json.timestamp_snooze) {\n        // Make sure timestamp_snooze is a string or value that can be parsed\n        if (typeof $json.timestamp_snooze === 'string' || \n            typeof $json.timestamp_snooze === 'number' || \n            $json.timestamp_snooze instanceof Date) {\n          \n          const snoozeTime = new Date($json.timestamp_snooze);\n          \n          // Verify snoozeTime is a valid date\n          if (!isNaN(snoozeTime.getTime()) && snoozeTime > now) {\n            return \"Snoozed\";\n          }\n        }\n      }\n    } catch (e) {\n      // Continue to next check, don't return yet\n    }\n    \n    // Check for deadline with extensive safety checks\n    try {\n      // Only proceed if timestamp_deadline exists and is a valid type\n      if ($json.timestamp_deadline && \n          (typeof $json.timestamp_deadline === 'string' || \n           typeof $json.timestamp_deadline === 'number' || \n           $json.timestamp_deadline instanceof Date)) {\n        \n        let deadlineTime;\n        try {\n          deadlineTime = new Date($json.timestamp_deadline);\n          \n          // Verify deadlineTime is valid\n          if (isNaN(deadlineTime.getTime())) {\n            return \"Active\"; // Invalid date, return Active\n          }\n          \n          // Only proceed with valid dates\n          try {\n            // Check if overdue\n            if (deadlineTime < now) {\n              return \"Overdue\";\n            }\n            \n            // Create today date for comparison\n            let today;\n            try {\n              today = new Date(now);\n              today.setHours(0, 0, 0, 0);\n              \n              if (isNaN(today.getTime())) {\n                return \"Active\"; // Invalid today date, return Active\n              }\n              \n              // Create deadline day for day-level comparison\n              let deadlineDay;\n              try {\n                deadlineDay = new Date(deadlineTime);\n                deadlineDay.setHours(0, 0, 0, 0);\n                \n                if (isNaN(deadlineDay.getTime())) {\n                  return \"Active\"; // Invalid deadline day, return Active\n                }\n                \n                // Calculate days difference safely\n                try {\n                  const diffTime = deadlineDay.getTime() - today.getTime();\n                  \n                  // Handle potential NaN\n                  if (isNaN(diffTime)) {\n                    return \"Active\";\n                  }\n                  \n                  const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\n                  \n                  // Handle potential NaN in diffDays\n                  if (isNaN(diffDays)) {\n                    return \"Active\";\n                  }\n                  \n                  // Apply business logic for different time frames\n                  if (diffDays === 0) return \"Due Today\";\n                  if (diffDays === 1) return \"Due Tomorrow\";\n                  if (diffDays > 1 && diffDays <= 7) return \"Due Soon\";\n                  return \"Active\"; // More than 7 days away\n                  \n                } catch (e) {\n                  return \"Active\"; // Error in diff calculation\n                }\n                \n              } catch (e) {\n                return \"Active\"; // Error in deadline day creation\n              }\n              \n            } catch (e) {\n              return \"Active\"; // Error in today date creation\n            }\n            \n          } catch (e) {\n            return \"Active\"; // Error in date comparison\n          }\n          \n        } catch (e) {\n          return \"Active\"; // Error in deadline date creation\n        }\n      }\n    } catch (e) {\n      return \"Active\"; // Error in deadline processing\n    }\n    \n    // Default fallback\n    return \"Active\";\n    \n  } catch (e) {\n    // Ultimate fallback\n    return \"Active\";\n  }\n})();}}",
              "type": "string"
            }
          ]
        },
        "includeOtherFields": true,
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -480,
        100
      ],
      "id": "85c14f4a-9bce-4867-b8e9-f9dcc220eefb",
      "name": "add status"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "d4a0ecbe-e73b-4c85-855f-e3a766d1adfc",
              "leftValue": "={{$json.isEmpty()}}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -700,
        0
      ],
      "id": "e439e723-a724-4663-bd94-604a65f19925",
      "name": "empty?",
      "alwaysOutputData": false
    },
    {
      "parameters": {
        "respondWith": "noData",
        "options": {
          "responseCode": 200
        }
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [
        -480,
        -100
      ],
      "id": "a5d498cf-065d-4818-949e-f54cc788cb6f",
      "name": "Respond w empty tasks"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "1a9a7963-08a2-4e74-8b8d-7dc0df274c9f",
              "name": "status_color",
              "value": "={{ \n  {\n    \"Completed\": \"#d1e7dd\",  // soft mint green\n    \"Snoozed\": \"#e2e3ff\",    // light lavender\n    \"Overdue\": \"#fee2e2\",    // light pink\n    \"Due Today\": \"#fff3cd\",   // soft amber\n    \"Due Tomorrow\": \"#fff8e6\", // very light amber\n    \"Due Soon\": \"#f8f9fa\",     // light gray\n    \"active\": \"#cfe2ff\"      // light sky blue\n  }[$json.status] || \"#f8f9fa\" // default to light gray if status not found\n}}",
              "type": "string"
            }
          ]
        },
        "includeOtherFields": true,
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -260,
        100
      ],
      "id": "d0823e30-35f0-45f4-a6c8-3d55086e4ba6",
      "name": "add status color"
    },
    {
      "parameters": {
        "path": "get-tasks",
        "responseMode": "responseNode",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        -1580,
        0
      ],
      "id": "96bca9aa-cb46-4804-9a56-bbd81b6c877f",
      "name": "/get-tasks",
      "webhookId": "07639ed8-3eb6-45c4-808a-4f563e7dd0ff"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "42a6db23-2aac-4f33-84e8-21ffea237ca1",
              "name": "user",
              "value": "={{ $json.query.user }}",
              "type": "string"
            },
            {
              "id": "2ce351d8-ae50-4c4c-b7da-a900f608c54c",
              "name": "assigned",
              "value": "={{ $json.query.assigned }}",
              "type": "string"
            },
            {
              "id": "37e7e1fa-8aaa-4238-8939-008b6c5830ee",
              "name": "deadlines",
              "value": "={{ $json.query.deadlines }}",
              "type": "string"
            },
            {
              "id": "03852242-448b-4f59-a209-8e47b6dd3a49",
              "name": "snooze",
              "value": "={{ $json.query.snooze }}",
              "type": "string"
            },
            {
              "id": "f669f235-cf06-4f2e-a6c7-7142778979af",
              "name": "priorities",
              "value": "={{ $json.query.priorities }}",
              "type": "string"
            },
            {
              "id": "9d91959a-6afc-479b-b55e-3cbed5223e51",
              "name": "properties",
              "value": "={{ $json.query.properties }}",
              "type": "string"
            },
            {
              "id": "aec10aac-37b2-49f9-a961-865cf40bad57",
              "name": "completed",
              "value": "={{ $json.query.completed }}",
              "type": "string"
            },
            {
              "id": "fc6be482-1f8f-42d1-bde9-3599c6deb9c7",
              "name": "sort_column",
              "value": "={{ $json.query.sort_column }}",
              "type": "string"
            },
            {
              "id": "02b554ef-4c35-412a-a303-2f6dc9a31b0c",
              "name": "sort_direction",
              "value": "={{ $json.query.sort_direction }}",
              "type": "string"
            },
            {
              "id": "1ac1a239-a913-4b0a-82d1-b121bf15dd80",
              "name": "search_query",
              "value": "={{ $json.query.search_query }}",
              "type": "string"
            },
            {
              "id": "734b733f-f583-47dd-b69e-6e09ba32a2a5",
              "name": "search_columns",
              "value": "={{ $json.query.search_columns }}",
              "type": "string"
            }
          ]
        },
        "options": {
          "dotNotation": true
        }
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -1360,
        0
      ],
      "id": "b39f99df-26d8-4c05-b0b5-88866606af2d",
      "name": "inputs",
      "notesInFlow": true,
      "notes": "inputs"
    }
  ],
  "notes": "",
  "pinData": {
    "/get-tasks": [
      {
        "json": {
          "headers": {
            "accept-encoding": "gzip",
            "user-agent": "ReactorNetty/1.1.22",
            "host": "n8n.railway.internal:5678",
            "accept": "*/*"
          },
          "params": {},
          "query": {
            "user": "alex+dev@imposbl.com",
            "assigned": "tege@imposbl.com",
            "deadlines": "null",
            "snooze": "Active",
            "priorities": "null",
            "properties": "726",
            "completed": "false",
            "sort_column": "",
            "sort_direction": "null",
            "search_query": "",
            "search_columns": "[\"title\",\"description\"]",
            "flagged": ""
          },
          "body": {},
          "webhookUrl": "https://s8s.up.railway.app/webhook/get-tasks",
          "executionMode": "production"
        }
      }
    ]
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [],
  "triggerCount": 1,
  "updatedAt": "2025-04-10T07:25:31.846Z",
  "versionId": "61ee9b7f-ddcb-435d-9e41-8e5753281a22"
}