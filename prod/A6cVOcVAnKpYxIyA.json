{
  "active": true,
  "connections": {
    "/records-update": {
      "main": [
        [
          {
            "node": "auth",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "inputs": {
      "main": [
        [
          {
            "node": "query",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "auth": {
      "main": [
        [
          {
            "node": "inputs",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "query": {
      "main": [
        [
          {
            "node": "update supabase",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "update supabase": {
      "main": [
        [
          {
            "node": "200",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "400",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2025-04-09T22:09:05.191Z",
  "execution_id": "27736",
  "id": "A6cVOcVAnKpYxIyA",
  "meta": null,
  "name": "/records-update",
  "nodes": [
    {
      "parameters": {
        "respondWith": "noData",
        "options": {
          "responseCode": 200
        }
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [
        1100,
        -400
      ],
      "id": "b153c259-1f45-4464-864e-a86da67d9be4",
      "name": "200"
    },
    {
      "parameters": {
        "respondWith": "noData",
        "options": {
          "responseCode": 400
        }
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [
        1100,
        -200
      ],
      "id": "2873b402-0534-4ec2-9463-cf900b8da220",
      "name": "400"
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "records-update",
        "responseMode": "responseNode",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        0,
        -300
      ],
      "id": "43b289d6-d478-4d70-8e62-ab9f5d6b34f1",
      "name": "/records-update",
      "webhookId": "f838d05f-0c99-42dd-a099-c038893f8b84"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "2e08aaa2-f13d-4984-8f37-0deb96c21751",
              "name": "update_table",
              "value": "={{ $json.query.update_table }}",
              "type": "string"
            },
            {
              "id": "5fb1e90a-da67-4b5c-ab0b-6cfd401d1a48",
              "name": "update_columns",
              "value": "={{ $json.query.update_columns }}",
              "type": "string"
            },
            {
              "id": "d31b685b-da6d-49c8-8228-ac85181bccde",
              "name": "update_values",
              "value": "={{ $json.query.update_values }}",
              "type": "string"
            },
            {
              "id": "54388797-7541-4d5c-ae9a-40dfc44b269b",
              "name": "search_column",
              "value": "={{ $json.query.search_column }}",
              "type": "string"
            },
            {
              "id": "73e37cde-186a-4429-bfa1-17c137845273",
              "name": "search_query",
              "value": "={{ $json.query.search_query }}",
              "type": "string"
            },
            {
              "id": "d08fc18c-14b6-42c7-8eb8-6982d9c2e8de",
              "name": "updated_by",
              "value": "={{ $json.query.updated_by }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        440,
        -300
      ],
      "id": "7b47d32d-0b37-45b2-8910-2bc732fab927",
      "name": "inputs"
    },
    {
      "parameters": {
        "jsCode": "// Get inputs from the workflow\nconst inputData = $input.first().json;\nlet updateTable = inputData.update_table;\nlet updateColumns = inputData.update_columns;\nlet updateValues = inputData.update_values;\nlet searchColumn = inputData.search_column;\nlet searchQuery = inputData.search_query;\nlet updatedBy = inputData.updated_by;\n\n// Enhanced parsing function to handle different input formats\nfunction parseInput(input) {\n  // If it's already an array, return it\n  if (Array.isArray(input)) {\n    return input;\n  }\n  \n  // If it's a string\n  if (typeof input === 'string') {\n    // Try to parse as JSON array if it looks like one\n    if (input.trim().startsWith('[') && input.trim().endsWith(']')) {\n      try {\n        return JSON.parse(input);\n      } catch (e) {\n        // If parsing fails, continue to other methods\n      }\n    }\n    \n    // Check if it's a comma-separated string\n    if (input.includes(',')) {\n      // Split by comma and trim each value\n      return input.split(',').map(item => item.trim());\n    }\n    \n    // Single value\n    return [input.trim()];\n  }\n  \n  // For any other type (like numbers), wrap in array\n  return [input];\n}\n\n// Apply enhanced parsing to all inputs\nupdateColumns = parseInput(updateColumns);\nupdateValues = parseInput(updateValues);\nsearchQuery = parseInput(searchQuery);\n\n// Validate that columns and values match in length\nif (updateColumns.length !== updateValues.length) {\n  throw new Error('Number of columns does not match number of values');\n}\n\n// Build the filter query for PostgREST\nlet filterQuery;\nif (searchQuery.length === 0) {\n  throw new Error('Search query cannot be empty');\n} else if (searchQuery.length === 1) {\n  // For single value, use 'eq' operator\n  filterQuery = `${searchColumn}=eq.${searchQuery[0]}`;\n} else {\n  // For multiple values, use 'in' operator\n  filterQuery = `${searchColumn}=in.(${searchQuery.join(',')})`;\n}\n\n// Create the PATCH body\nconst updatePayload = {};\nfor (let i = 0; i < updateColumns.length; i++) {\n  // Convert string booleans to actual booleans\n  if (updateValues[i] === 'true') {\n    updateValues[i] = true;\n  } else if (updateValues[i] === 'false') {\n    updateValues[i] = false;\n  }\n  updatePayload[updateColumns[i]] = updateValues[i];\n}\n\n// Add updated_by if provided\nif (updatedBy) {\n  updatePayload.updated_by = updatedBy;\n}\n\n// Construct the final query string\nconst query = `${updateTable}?${filterQuery}`;\n\n// Return just the query string and the body payload\nreturn {\n  query: query,\n  body: updatePayload\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        660,
        -300
      ],
      "id": "fbd07c3c-534d-41b7-bd88-f19871f9088a",
      "name": "query"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "e5eb84c2-4654-48ca-ad08-f95bf793954b",
              "leftValue": "={{ $json.headers.host }}",
              "rightValue": "n8n.railway.internal:5678",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            },
            {
              "id": "286e5a6c-8ac9-4b27-9a99-e738691e258c",
              "leftValue": "={{ $json.query.search_query }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "notEmpty",
                "singleValue": true
              }
            },
            {
              "id": "96be0110-545a-4150-ac25-828edfda8294",
              "leftValue": "={{ $json.query.search_query }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "exists",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.filter",
      "typeVersion": 2.2,
      "position": [
        220,
        -300
      ],
      "id": "d6df2557-98d3-477c-80bf-8352ecd3f64d",
      "name": "auth"
    },
    {
      "parameters": {
        "method": "PATCH",
        "url": "=https://qyyyacmhcwqdxqnhgqmr.supabase.co/rest/v1/{{ $json.query }}",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "supabaseApi",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            },
            {
              "name": "Prefer",
              "value": "return=minimal"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ $json.body }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        880,
        -300
      ],
      "id": "ade55e43-e82a-4b8b-9c95-c5fdbaa98f38",
      "name": "update supabase",
      "alwaysOutputData": false,
      "credentials": {
        "supabaseApi": {
          "id": "hN8Yj6BvjJqfKMnH",
          "name": "Rent Ready Supabase"
        }
      },
      "onError": "continueErrorOutput"
    }
  ],
  "notes": "",
  "pinData": {
    "/records-update": [
      {
        "json": {
          "headers": {
            "accept-encoding": "gzip",
            "user-agent": "ReactorNetty/1.1.22",
            "host": "n8n.railway.internal:5678",
            "accept": "*/*",
            "content-type": "application/json",
            "content-length": "0"
          },
          "params": {},
          "query": {
            "update_table": "media",
            "update_columns": "set_to_delete",
            "update_values": "true",
            "search_column": "storage_url",
            "search_query": "https://qyyyacmhcwqdxqnhgqmr.supabase.co/storage/v1/object/public/properties/8965/photos/bc6b9e8a-22f7-4ea4-ae03-fbfec2d76941.jpeg",
            "updated_by": "alex+dev@imposbl.com"
          },
          "body": {},
          "webhookUrl": "https://s8s.up.railway.app/webhook/records-update",
          "executionMode": "production"
        }
      }
    ]
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [],
  "triggerCount": 1,
  "updatedAt": "2025-04-13T18:16:30.556Z",
  "versionId": "fe009c9b-f053-4876-a183-efa8c82f4ad0"
}