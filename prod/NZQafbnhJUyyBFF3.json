{
  "active": true,
  "connections": {
    "/tags": {
      "main": [
        [
          {
            "node": "inputs",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch": {
      "main": [
        [
          {
            "node": "insert tag",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "delete all",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "split by tag": {
      "main": [
        [
          {
            "node": "Switch",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "delete all": {
      "main": [
        [
          {
            "node": "hasData?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "inputs": {
      "main": [
        [
          {
            "node": "property_id",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "property_id": {
      "main": [
        [
          {
            "node": "split by tag",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "hasData?": {
      "main": [
        [
          {
            "node": "insert tag1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2025-03-30T08:52:17.379Z",
  "execution_id": "21735",
  "id": "NZQafbnhJUyyBFF3",
  "meta": null,
  "name": "Tags",
  "nodes": [
    {
      "parameters": {
        "multipleMethods": true,
        "httpMethod": [
          "POST"
        ],
        "path": "tags",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        -1400,
        -140
      ],
      "id": "2ba4c7a3-2391-4513-adc4-ca221bd75df0",
      "name": "/tags",
      "webhookId": "07639ed8-3eb6-45c4-808a-4f563e7dd0ff"
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": false,
                  "leftValue": "",
                  "typeValidation": "loose",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.add_or_replace }}",
                    "rightValue": "add",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "id": "8da7ee68-dc0e-4a14-856e-f8cdba11d1d4"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "add"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": false,
                  "leftValue": "",
                  "typeValidation": "loose",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "04738375-1055-4a70-8746-8f2c8fb57582",
                    "leftValue": "={{ $json.add_or_replace }}",
                    "rightValue": "replace",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "replace"
            }
          ]
        },
        "looseTypeValidation": true,
        "options": {
          "ignoreCase": true
        }
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        -520,
        -140
      ],
      "id": "d75dd1ee-e25e-4e00-bd0b-31ba6c5a0fbd",
      "name": "Switch"
    },
    {
      "parameters": {
        "jsCode": "// Get the input data\nconst tags = $input.first().json.tags;\nconst property_id = $input.first().json.property_id;\nconst addOrReplace = $input.first().json.add_or_replace;\n\n// Function to handle array or string that looks like an array\nfunction processArrayInput(tags) {\n  if (!tags) return []; // Handle null, undefined, or empty string\n\n  if (typeof tags === \"string\") {\n    // If it's empty, return empty array\n    if (tags.trim() === \"\") return [];\n\n    try {\n      // Try to parse it as JSON\n      return JSON.parse(tags);\n    } catch (e) {\n      // If parsing fails, assume it's a comma-separated string\n      return tags\n        .split(\",\")\n        .map((item) => item.trim())\n        .filter((item) => item !== \"\");\n    }\n  } else if (Array.isArray(tags)) {\n    return tags;\n  }\n  return [];\n}\n\n// Process the tags\nconst processedTags = processArrayInput(tags);\n\n// If no tags, return empty array to prevent N8N errors\nif (processedTags.length === 0) {\n  return [];\n}\n\n// Return one item per tag\nreturn processedTags.map((tag) => ({\n  json: {\n    tag: tag,\n    property_id: property_id,\n    add_or_replace: addOrReplace,\n  },\n}));\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -740,
        -140
      ],
      "id": "d0671295-fc98-4df1-9523-3fd95cfaab36",
      "name": "split by tag"
    },
    {
      "parameters": {
        "tableId": "properties_tags",
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "property_id",
              "fieldValue": "={{ $json.property_id }}"
            },
            {
              "fieldId": "tag_id",
              "fieldValue": "={{ $json.tag }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        -300,
        -240
      ],
      "id": "d53f4074-e92a-4644-8aea-09c48ba1020b",
      "name": "insert tag",
      "credentials": {
        "supabaseApi": {
          "id": "hN8Yj6BvjJqfKMnH",
          "name": "Rent Ready Supabase"
        }
      },
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "operation": "delete",
        "tableId": "properties_tags",
        "filters": {
          "conditions": [
            {
              "keyName": "property_id",
              "condition": "eq",
              "keyValue": "={{ $json.property_id }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        -300,
        -40
      ],
      "id": "c0d33ad0-f596-4cf3-8fa0-ba37d9175464",
      "name": "delete all",
      "executeOnce": true,
      "credentials": {
        "supabaseApi": {
          "id": "hN8Yj6BvjJqfKMnH",
          "name": "Rent Ready Supabase"
        }
      }
    },
    {
      "parameters": {
        "tableId": "properties_tags",
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "property_id",
              "fieldValue": "={{ $json.property_id }}"
            },
            {
              "fieldId": "tag_id",
              "fieldValue": "={{ $json.tag_id }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        140,
        -40
      ],
      "id": "f131095c-0cdc-4fb5-9eba-bbfe4eb9b735",
      "name": "insert tag1",
      "credentials": {
        "supabaseApi": {
          "id": "hN8Yj6BvjJqfKMnH",
          "name": "Rent Ready Supabase"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "85a62f46-e1fa-4b5b-a6c1-b3084dc8280f",
              "name": "property_id",
              "value": "={{ $json.query.property_id }}",
              "type": "string"
            },
            {
              "id": "1a5f9e0f-686a-4485-a372-052c8ef3d6f8",
              "name": "tags",
              "value": "={{ $json.query.tags }}",
              "type": "array"
            },
            {
              "id": "e179d4f3-8584-4324-a1f9-a6a9bc82effc",
              "name": "add_or_replace",
              "value": "={{ $json.query.add_or_replace }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -1180,
        -140
      ],
      "id": "87b4edaa-631f-4cfe-9051-659d7a933f89",
      "name": "inputs",
      "notesInFlow": false,
      "notes": "All of the \"filter_\" inputs are optional"
    },
    {
      "parameters": {
        "dataToSave": {
          "values": [
            {
              "key": "property_id",
              "value": "={{ $json.property_id }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.executionData",
      "typeVersion": 1,
      "position": [
        -960,
        -140
      ],
      "id": "39cb516b-d093-44e9-8d27-fb0c6430b21f",
      "name": "property_id"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "loose",
            "version": 2
          },
          "conditions": [
            {
              "id": "5a49b258-c265-4c08-b35b-7253e0d5c5ab",
              "leftValue": "={{ $json.tag_id }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "notEmpty",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "looseTypeValidation": true,
        "options": {}
      },
      "type": "n8n-nodes-base.filter",
      "typeVersion": 2.2,
      "position": [
        -80,
        -40
      ],
      "id": "8c1eab9f-6a56-482a-906d-b2dec9c5e8fe",
      "name": "hasData?"
    }
  ],
  "notes": "",
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [],
  "triggerCount": 1,
  "updatedAt": "2025-04-01T16:30:12.588Z",
  "versionId": "1e963165-323a-45bd-b041-7df9fd8f1c39"
}