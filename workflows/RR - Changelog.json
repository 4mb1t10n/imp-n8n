{
  "active": false,
  "connections": {
    "Updated Property Record": {
      "main": [
        [
          {
            "node": "compare data2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "compare data2": {
      "main": [
        [
          {
            "node": "filter1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "compare data": {
      "main": [
        [
          {
            "node": "Filter",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "filter1": {
      "main": [
        [
          {
            "node": "Create change log record",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Filter": {
      "main": [
        [
          {
            "node": "changelog",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Updated Supabase Record": {
      "main": [
        [
          {
            "node": "compare data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2025-01-16T04:20:28.837Z",
  "id": "gVWCjB5Cq0kFBgzc",
  "meta": null,
  "name": "RR - Changelog",
  "nodes": [
    {
      "parameters": {
        "content": "## Property Updated\n### Log all changes to properties_chagelog",
        "height": 145.62196438101526
      },
      "id": "85902611-c731-414c-92e7-3de78f1e6e23",
      "name": "Sticky Note1",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -1140,
        280
      ],
      "disabled": true
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "2ac3d1a9-7334-451c-aa4c-947182f598d5",
        "authentication": "headerAuth",
        "options": {}
      },
      "id": "5d6c20f7-5faf-4e5f-852b-8f8dac08bc2b",
      "name": "Updated Property Record",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        -820,
        300
      ],
      "webhookId": "2ac3d1a9-7334-451c-aa4c-947182f598d5",
      "credentials": {
        "httpHeaderAuth": {
          "id": "mk6V0TaWYGlLXgPM",
          "name": "Supabase Imposbl Header Auth"
        }
      }
    },
    {
      "parameters": {
        "tableId": "changelog",
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "task_id",
              "fieldValue": "={{ $('Updated Supabase Record').first().json.body.table === \"tasks\" ? \n$('Updated Supabase Record').item.json.body.record.id : \nnull }}"
            },
            {
              "fieldId": "updated_column",
              "fieldValue": "={{ $json.updated_column }}"
            },
            {
              "fieldId": "updated_value",
              "fieldValue": "={{ $json.newValue }}"
            },
            {
              "fieldId": "updated_by",
              "fieldValue": "={{ $('Updated Supabase Record').item.json.body.record.updated_by }}"
            },
            {
              "fieldId": "updated_table",
              "fieldValue": "={{ $('Updated Supabase Record').item.json.body.table }}"
            },
            {
              "fieldId": "updated_column_type",
              "fieldValue": "={{ $json.column_type }}"
            },
            {
              "fieldId": "property_id",
              "fieldValue": "={{ $('Updated Supabase Record').first().json.body.table === \"properties\" ?  $('Updated Supabase Record').item.json.body.record.id :  null }}"
            }
          ]
        }
      },
      "id": "20d479f5-9da3-428f-b406-43174c997b98",
      "name": "changelog",
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        40,
        920
      ],
      "credentials": {
        "supabaseApi": {
          "id": "tB73GetIJaJt8VPH",
          "name": "Rent Ready Supabase"
        }
      }
    },
    {
      "parameters": {
        "tableId": "properties_changelog",
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "property_id",
              "fieldValue": "={{ $('Updated Property Record').first().json.body.record.id }}"
            },
            {
              "fieldId": "updated_field",
              "fieldValue": "={{ $json.difference }}"
            },
            {
              "fieldId": "value_old",
              "fieldValue": "={{ $json.oldValue }}"
            },
            {
              "fieldId": "value_new",
              "fieldValue": "={{ $json.newValue }}"
            },
            {
              "fieldId": "updated_by",
              "fieldValue": "={{ $('Updated Property Record').first().json.body.old_record.last_edited_by }}"
            },
            {
              "fieldId": "timestamp_updated",
              "fieldValue": "={{ $('Updated Property Record').item.json.body.record.timestamp_updated }}"
            }
          ]
        }
      },
      "id": "4e25c880-afb3-44b4-9058-5d12d2343fe9",
      "name": "Create change log record",
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        -180,
        300
      ],
      "credentials": {
        "supabaseApi": {
          "id": "tB73GetIJaJt8VPH",
          "name": "Rent Ready Supabase"
        }
      },
      "disabled": true
    },
    {
      "parameters": {
        "jsCode": "function findDifferences(obj1, obj2) {\n  let differences = [];\n  \n  for (let key in obj1) {\n    if (JSON.stringify(obj1[key]) !== JSON.stringify(obj2[key])) {\n      differences.push({\n        isDifferent: true,\n        difference: key,\n        oldValue: obj2[key],\n        newValue: obj1[key]\n      });\n    }\n  }\n  \n  // Check for keys in obj2 that are not in obj1\n  for (let key in obj2) {\n    if (!(key in obj1)) {\n      differences.push({\n        isDifferent: true,\n        difference: key,\n        oldValue: obj2[key],\n        newValue: undefined\n      });\n    }\n  }\n  \n  return differences;\n}\n\n// Assuming the JSON objects are in $('Updated Property Record').all()[0].json.body\nconst newObject = $('Updated Property Record').all()[0].json.body.record;\nconst oldObject = $('Updated Property Record').all()[0].json.body.old_record;\n\nconst differences = findDifferences(newObject, oldObject);\n\n// Set the output to be an array of difference objects\nitems = differences.map(diff => ({ json: diff }));\n\nreturn items;"
      },
      "id": "57450246-8ae5-4482-8ada-41d26721f18c",
      "name": "compare data2",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -620,
        300
      ],
      "disabled": true
    },
    {
      "parameters": {
        "jsCode": "function findDifferences(obj1, obj2 = {}) {\n  let differences = [];\n  \n  function getValueType(value) {\n    if (typeof value === 'string') {\n      const date = new Date(value);\n      if (date instanceof Date && !isNaN(date)) return 'timestamp';\n      return 'text';\n    }\n    if (typeof value === 'boolean') return 'boolean';\n    if (typeof value === 'number') return 'number';\n    if (Array.isArray(value)) return 'array';\n    if (value === null) return 'null';\n    if (typeof value === 'object') return 'object';\n    return 'undefined';\n  }\n  \n  for (let key in obj1) {\n    if (JSON.stringify(obj1[key]) !== JSON.stringify(obj2?.[key])) {\n      differences.push({\n        isDifferent: true,\n        updated_column: key,\n        column_type: getValueType(obj1[key]),\n        oldValue: obj2?.[key] ?? null,\n        newValue: obj1[key]\n      });\n    }\n  }\n  \n  if (obj2) {\n    for (let key in obj2) {\n      if (!(key in obj1)) {\n        differences.push({\n          isDifferent: true,\n          updated_column: key,\n          column_type: getValueType(obj2[key]),\n          oldValue: obj2[key],\n          newValue: undefined\n        });\n      }\n    }\n  }\n  \n  return differences;\n}\n\nconst newObject = $('Updated Supabase Record').all()[0].json.body.record;\nconst oldObject = $('Updated Supabase Record').all()[0].json.body.old_record || {};\nconst differences = findDifferences(newObject, oldObject);\nitems = differences.map(diff => ({ json: diff }));\nreturn items;"
      },
      "id": "16fd9d2b-ccd0-4c83-a880-b8ec2ed0b491",
      "name": "compare data",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -400,
        920
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 1
          },
          "conditions": [
            {
              "id": "00f990c9-9187-4105-ad41-69a174a6145a",
              "leftValue": "={{ $json.isDifferent }}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            },
            {
              "id": "83c73ac8-f765-472b-a762-f308f787848e",
              "leftValue": "={{ $json.difference }}",
              "rightValue": "timestamp_created",
              "operator": {
                "type": "string",
                "operation": "notEquals"
              }
            },
            {
              "id": "f87b8385-75c8-420b-9c11-35b5c8b2a9be",
              "leftValue": "={{ $json.difference }}",
              "rightValue": "timestamp_updated",
              "operator": {
                "type": "string",
                "operation": "notEquals"
              }
            },
            {
              "id": "52b907a1-ac31-47d6-8131-143d7524d204",
              "leftValue": "={{ $json.difference }}",
              "rightValue": "last_edited_by",
              "operator": {
                "type": "string",
                "operation": "notEquals"
              }
            },
            {
              "id": "9c229b94-2a15-499e-a793-2b470daab4df",
              "leftValue": "{{ $json.difference }}",
              "rightValue": "starred",
              "operator": {
                "type": "string",
                "operation": "notEquals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "317c4db7-99f3-4f61-9719-5c8732d5b122",
      "name": "filter1",
      "type": "n8n-nodes-base.filter",
      "typeVersion": 2.1,
      "position": [
        -400,
        300
      ],
      "disabled": true
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 1
          },
          "conditions": [
            {
              "id": "00f990c9-9187-4105-ad41-69a174a6145a",
              "leftValue": "={{ $json.isDifferent }}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            },
            {
              "id": "f87b8385-75c8-420b-9c11-35b5c8b2a9be",
              "leftValue": "={{ $json.updated_column }}",
              "rightValue": "timestamp_updated",
              "operator": {
                "type": "string",
                "operation": "notEquals"
              }
            },
            {
              "id": "52b907a1-ac31-47d6-8131-143d7524d204",
              "leftValue": "={{ $json.updated_column }}",
              "rightValue": "updated_by",
              "operator": {
                "type": "string",
                "operation": "notEquals"
              }
            },
            {
              "id": "451ead62-3dee-4199-9e1f-5d7b3e5bc0d7",
              "leftValue": "={{ $json.updated_column }}",
              "rightValue": "id",
              "operator": {
                "type": "string",
                "operation": "notEquals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "f2f311de-ded5-4087-8c71-bdec4ca43540",
      "name": "Filter",
      "type": "n8n-nodes-base.filter",
      "typeVersion": 2.1,
      "position": [
        -180,
        920
      ]
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "tasks-table-updated",
        "authentication": "headerAuth",
        "options": {}
      },
      "id": "e182b79b-d03e-480a-b1a7-2461583050bb",
      "name": "Updated Supabase Record",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        -620,
        920
      ],
      "webhookId": "2ac3d1a9-7334-451c-aa4c-947182f598d5",
      "credentials": {
        "httpHeaderAuth": {
          "id": "mk6V0TaWYGlLXgPM",
          "name": "Supabase Imposbl Header Auth"
        }
      }
    },
    {
      "parameters": {
        "content": "The id of each table is supabase needs to be called exactly \"id\"",
        "height": 380,
        "width": 180
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        0,
        700
      ],
      "typeVersion": 1,
      "id": "53bc59b7-80d1-406b-a759-a60621760219",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "content": "the columns in each table that are intended for creating a changelog:\n\nupdated_by\ntimestamp_updated",
        "height": 380,
        "width": 180
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -220,
        700
      ],
      "typeVersion": 1,
      "id": "582f4a95-956b-4ab4-beb6-3f38b1a90081",
      "name": "Sticky Note2"
    }
  ],
  "pinData": {
    "Updated Property Record": [
      {
        "json": {
          "headers": {
            "host": "imposbl.up.railway.app",
            "user-agent": "pg_net/0.7.1",
            "content-length": "3563",
            "accept": "*/*",
            "authorization": "Bearer jpsK8t@SefRvRdt*yS3qG@nubYkmNFdyFlnO4I8VR3w32uBgasY^36xVuJ7LJfBG970A9lvGCMk#&i1x3HEFCBI7gAvaCkj9$0X",
            "content-type": "application/json",
            "x-forwarded-for": "3.210.235.210",
            "x-forwarded-host": "imposbl.up.railway.app",
            "x-forwarded-proto": "https",
            "x-railway-request-id": "g9qv8lLGQKak0uK6o1eahA_603524580",
            "x-real-ip": "3.210.235.210",
            "x-request-start": "1737130374147",
            "accept-encoding": "gzip"
          },
          "params": {},
          "query": {},
          "body": {
            "type": "UPDATE",
            "table": "properties",
            "record": {
              "id": 616,
              "beds": 3,
              "baths": 1,
              "garage": 2,
              "starred": false,
              "stories": 2,
              "coord_lat": 41.643614,
              "coord_lng": -83.584133,
              "prop_year": 1912,
              "is_pending": null,
              "realtor_id": 3026652828,
              "address_zip": "43607",
              "offer_price": null,
              "realtor_url": "https://www.realtor.com/realestateandhomes-detail/319-N-Detroit-Ave_Toledo_OH_43607_M30266-52828",
              "address_city": "Toledo",
              "county_tract": null,
              "realtor_desc": "Nice three bedroom home with large kitchen and first floor laundry! Enjoy evenings relaxing on the wonderful front porch. Backyard is partially fenced in with large 2 car garage. Exterior has been freshly painted. Partial basement provides space for extra storage. Nice sized bedrooms upstairs with additional walk-in attic space. Revamped Hamilton Park is right around the corner. Great starter home or add this one to your investment portfolio.",
              "address_state": "OH",
              "county_parcel": null,
              "is_contingent": null,
              "is_off_market": null,
              "is_short_sale": null,
              "scrape_source": "Realtor.com",
              "address_street": "319 N Detroit Ave",
              "followup_notes": "edit 7 testing the timestamp",
              "is_foreclosure": null,
              "last_edited_by": "alex+dev@imposbl.com",
              "realtor_status": "for_sale",
              "property_status": "Auction",
              "prop_size_inside": 1341,
              "prop_cooking_type": null,
              "prop_size_outside": 5101,
              "timestamp_created": "2025-01-16T22:56:48.606+00:00",
              "timestamp_scraped": "2025-01-16T22:56:48.606+00:00",
              "timestamp_updated": "2025-01-16T22:56:48.606+00:00",
              "realtor_list_price": 69900,
              "timestamp_followup": null,
              "address_neighborhood": "Onyx",
              "prop_heating_type_air": null,
              "realtor_dwelling_type": "single_family",
              "realtor_last_sold_date": "2012-03-01",
              "prop_heating_type_water": null,
              "realtor_last_sold_price": 2600
            },
            "schema": "public",
            "old_record": {
              "id": 616,
              "beds": 3,
              "baths": 1,
              "garage": 2,
              "starred": false,
              "stories": 2,
              "coord_lat": 41.643614,
              "coord_lng": -83.584133,
              "prop_year": 1912,
              "is_pending": null,
              "realtor_id": 3026652828,
              "address_zip": "43607",
              "offer_price": null,
              "realtor_url": "https://www.realtor.com/realestateandhomes-detail/319-N-Detroit-Ave_Toledo_OH_43607_M30266-52828",
              "address_city": "Toledo",
              "county_tract": null,
              "realtor_desc": "Nice three bedroom home with large kitchen and first floor laundry! Enjoy evenings relaxing on the wonderful front porch. Backyard is partially fenced in with large 2 car garage. Exterior has been freshly painted. Partial basement provides space for extra storage. Nice sized bedrooms upstairs with additional walk-in attic space. Revamped Hamilton Park is right around the corner. Great starter home or add this one to your investment portfolio.",
              "address_state": "OH",
              "county_parcel": null,
              "is_contingent": null,
              "is_off_market": null,
              "is_short_sale": null,
              "scrape_source": "Realtor.com",
              "address_street": "319 N Detroit Ave",
              "followup_notes": "edit 7 testing the timestamp",
              "is_foreclosure": null,
              "last_edited_by": "alex+dev@imposbl.com",
              "realtor_status": "for_sale",
              "property_status": "New",
              "prop_size_inside": 1341,
              "prop_cooking_type": null,
              "prop_size_outside": 5101,
              "timestamp_created": "2025-01-16T22:56:48.606+00:00",
              "timestamp_scraped": "2025-01-16T22:56:48.606+00:00",
              "timestamp_updated": "2025-01-16T22:56:48.606+00:00",
              "realtor_list_price": 69900,
              "timestamp_followup": null,
              "address_neighborhood": "Onyx",
              "prop_heating_type_air": null,
              "realtor_dwelling_type": "single_family",
              "realtor_last_sold_date": "2012-03-01",
              "prop_heating_type_water": null,
              "realtor_last_sold_price": 2600
            }
          },
          "webhookUrl": "https://imposbl.up.railway.app/webhook/2ac3d1a9-7334-451c-aa4c-947182f598d5",
          "executionMode": "production"
        }
      }
    ],
    "Updated Supabase Record": [
      {
        "json": {
          "headers": {
            "host": "imposbl.up.railway.app",
            "user-agent": "pg_net/0.7.1",
            "content-length": "753",
            "accept": "*/*",
            "authorization": "Bearer jpsK8t@SefRvRdt*yS3qG@nubYkmNFdyFlnO4I8VR3w32uBgasY^36xVuJ7LJfBG970A9lvGCMk#&i1x3HEFCBI7gAvaCkj9$0X",
            "content-type": "application/json",
            "x-forwarded-for": "3.210.235.210",
            "x-forwarded-host": "imposbl.up.railway.app",
            "x-forwarded-proto": "https",
            "x-railway-request-id": "o3hJde1RTee1IW3S0yubbw_882434190",
            "x-real-ip": "3.210.235.210",
            "x-request-start": "1737914932375",
            "accept-encoding": "gzip"
          },
          "params": {},
          "query": {},
          "body": {
            "type": "UPDATE",
            "table": "tasks",
            "record": {
              "id": 54,
              "title": "updates here to title",
              "status": "Not Started",
              "date_due": "2025-01-31T05:00:00+00:00",
              "date_defer": "2025-01-31T05:00:00+00:00",
              "updated_by": "alex+dev@imposbl.com",
              "assigned_to": "irfanmasood@gmail.com",
              "description": "desc",
              "property_id": 616,
              "timestamp_updated": "2025-01-26T18:08:52.272292+00:00"
            },
            "schema": "public",
            "old_record": {
              "id": 54,
              "title": "testing updating a task here",
              "status": "Not Started",
              "date_due": "2025-01-31T05:00:00+00:00",
              "date_defer": "2025-01-31T05:00:00+00:00",
              "updated_by": "alex+dev@imposbl.com",
              "assigned_to": "irfanmasood@gmail.com",
              "description": "desc",
              "property_id": 616,
              "timestamp_updated": "2025-01-26T16:01:45.404206+00:00"
            }
          },
          "webhookUrl": "https://imposbl.up.railway.app/webhook/tasks-table-updated",
          "executionMode": "production"
        }
      }
    ]
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [],
  "triggerCount": 2,
  "updatedAt": "2025-02-05T14:05:31.456Z",
  "versionId": "f0a31bf5-f6c8-45e0-b805-8cb2904cb27c"
}