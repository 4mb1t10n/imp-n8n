{
  "createdAt": "2025-04-10T18:26:15.140Z",
  "updatedAt": "2025-04-13T19:09:49.994Z",
  "id": "RZlZ6qypldoEYRn6",
  "name": "/supabase-updated-media",
  "active": true,
  "nodes": [
    {
      "parameters": {
        "operation": "update",
        "tableId": "properties",
        "filters": {
          "conditions": [
            {
              "keyName": "id",
              "condition": "eq",
              "keyValue": "={{ $json.id }}"
            }
          ]
        },
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "cover_photo_url",
              "fieldValue": "={{ $('inputs').item.json.new_record.storage_url }}"
            },
            {
              "fieldId": "updated_by",
              "fieldValue": "Bot@RentReadyS8.com"
            },
            {
              "fieldId": "timestamp_updated",
              "fieldValue": "={{ new Date().toISOString() }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        1020,
        100
      ],
      "id": "a20173bf-4074-4da5-a285-abfd33e720a2",
      "name": "set cover photo",
      "credentials": {
        "supabaseApi": {
          "id": "hN8Yj6BvjJqfKMnH",
          "name": "Rent Ready Supabase"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "93e240bd-8e1e-484a-96e9-3c7cee1f1bfd",
              "leftValue": "={{ $json.cover_photo_url }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "notExists",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.filter",
      "typeVersion": 2.2,
      "position": [
        800,
        100
      ],
      "id": "955fdc7b-7e0b-4fd7-96d8-3774b27cf65b",
      "name": "empty cover photo"
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "supabase-updated-media",
        "authentication": "headerAuth",
        "options": {}
      },
      "id": "2cf989c0-5643-4cca-af58-ebd07bff75b2",
      "name": "/supabase-updated-media",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        -520,
        0
      ],
      "webhookId": "2ac3d1a9-7334-451c-aa4c-947182f598d5",
      "credentials": {
        "httpHeaderAuth": {
          "id": "KwKIAL5ixwLlPeZY",
          "name": "Supabase Imposbl Header Auth"
        }
      }
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.type }}",
                    "rightValue": "UPDATE",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "id": "dd573d18-d3bc-43f0-8e91-993be529a20b"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "UPDATE"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "e5542755-9a16-4ccb-bb8d-0603567d3480",
                    "leftValue": "={{ $json.type }}",
                    "rightValue": "UPDATE",
                    "operator": {
                      "type": "string",
                      "operation": "notEquals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "NEW"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        -80,
        0
      ],
      "id": "eeba86ac-0058-42d3-8cb5-ec7e78e95bb3",
      "name": "new or update"
    },
    {
      "parameters": {
        "dataToSave": {
          "values": [
            {
              "key": "w",
              "value": "update"
            },
            {
              "key": "id",
              "value": "={{ $json.new_record.id }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.executionData",
      "typeVersion": 1,
      "position": [
        140,
        -100
      ],
      "id": "fd0fc272-e151-4fc2-90e8-649630126b33",
      "name": "w: update",
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "dataToSave": {
          "values": [
            {
              "key": "w",
              "value": "new"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.executionData",
      "typeVersion": 1,
      "position": [
        140,
        100
      ],
      "id": "64c39ac1-a6e2-499e-b270-03d9bce693b6",
      "name": "w: new",
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "f743914b-f427-48fb-901e-10ee1b71c7f1",
              "name": "table",
              "value": "={{ $json.body.table }}",
              "type": "string"
            },
            {
              "id": "90237df7-4b1c-4463-a076-8f16ed878e74",
              "name": "type",
              "value": "={{ $json.body.type }}",
              "type": "string"
            },
            {
              "id": "5f3ad40b-5195-4845-80b7-dd337c872813",
              "name": "new_record",
              "value": "={{ $json.body.record }}",
              "type": "object"
            },
            {
              "id": "97538103-c349-4463-8ebd-dd9bbbf66c13",
              "name": "old_record",
              "value": "={{ $json.body.old_record }}",
              "type": "object"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -300,
        0
      ],
      "id": "fa080c5c-40dc-4492-b708-c51d5963be2a",
      "name": "inputs"
    },
    {
      "parameters": {
        "jsCode": "function findDifferences(obj1, obj2 = {}) {\n  let differences = [];\n  \n  function getValueType(value) {\n    if (typeof value === 'string') {\n      const date = new Date(value);\n      if (date instanceof Date && !isNaN(date)) return 'timestamp';\n      return 'text';\n    }\n    if (typeof value === 'boolean') return 'boolean';\n    if (typeof value === 'number') return 'number';\n    if (Array.isArray(value)) return 'array';\n    if (value === null) return 'null';\n    if (typeof value === 'object') return 'object';\n    return 'undefined';\n  }\n  \n  for (let key in obj1) {\n    if (JSON.stringify(obj1[key]) !== JSON.stringify(obj2?.[key])) {\n      differences.push({\n        isDifferent: true,\n        updated_column: key,\n        column_type: getValueType(obj1[key]),\n        oldValue: obj2?.[key] ?? null,\n        newValue: obj1[key]\n      });\n    }\n  }\n  \n  if (obj2) {\n    for (let key in obj2) {\n      if (!(key in obj1)) {\n        differences.push({\n          isDifferent: true,\n          updated_column: key,\n          column_type: getValueType(obj2[key]),\n          oldValue: obj2[key],\n          newValue: undefined\n        });\n      }\n    }\n  }\n  \n  // If no differences found, return array with \"no changes\" message\n  if (differences.length === 0) {\n    return [{\n      isDifferent: false,\n      message: \"no changes\"\n    }];\n  }\n  \n  return differences;\n}\n\n\n\nconst newObject = $('inputs').first().json.new_record;\nconst oldObject = $('inputs').first().json.old_record || {};\nconst differences = findDifferences(newObject, oldObject);\nitems = differences.map(diff => ({ json: diff }));\nreturn items;"
      },
      "id": "50caf585-1031-4a97-8b83-4309418e3ad9",
      "name": "compare",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        360,
        -100
      ],
      "notes": "The id of each table is supabase needs to be called exactly \"id\""
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 1
          },
          "conditions": [
            {
              "id": "451ead62-3dee-4199-9e1f-5d7b3e5bc0d7",
              "leftValue": "={{ $json.updated_column }}",
              "rightValue": "set_to_delete",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "af90eaa1-8b6b-4edf-af9c-6367df0048a9",
      "name": "set_to_delete",
      "type": "n8n-nodes-base.filter",
      "typeVersion": 2.1,
      "position": [
        580,
        -100
      ]
    },
    {
      "parameters": {
        "workflowId": {
          "__rl": true,
          "value": "SyURwWx9V6i1uw5s",
          "mode": "list",
          "cachedResultName": "/delete"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {
            "storage_url": "={{ $('inputs').item.json.new_record.storage_url }}"
          },
          "matchingColumns": [
            "storage_url"
          ],
          "schema": [
            {
              "id": "storage_url",
              "displayName": "storage_url",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": true
        },
        "mode": "each",
        "options": {}
      },
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1.2,
      "position": [
        800,
        -100
      ],
      "id": "77e563fe-2346-4afb-9b51-7bd2aabf198a",
      "name": "Execute Workflow"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "5702f6b6-4819-46d3-8586-c4e54e0de1a9",
              "leftValue": "={{ $('inputs').item.json.new_record.tag }}",
              "rightValue": "Property Photo",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            },
            {
              "id": "c46ddeec-b02f-48ad-ab91-36b2ac20a9c3",
              "leftValue": "={{ $('inputs').item.json.new_record.property_id }}",
              "rightValue": "",
              "operator": {
                "type": "number",
                "operation": "exists",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.filter",
      "typeVersion": 2.2,
      "position": [
        360,
        100
      ],
      "id": "2a8d9d39-275e-420c-b332-e2b2c79af95e",
      "name": "coverPhoto & propertyId"
    },
    {
      "parameters": {
        "operation": "get",
        "tableId": "properties",
        "filters": {
          "conditions": [
            {
              "keyName": "id",
              "keyValue": "={{ $('inputs').item.json.new_record.property_id }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        580,
        100
      ],
      "id": "94d7f3e4-97af-4076-88e3-48c0dab338b5",
      "name": "getProperty",
      "credentials": {
        "supabaseApi": {
          "id": "hN8Yj6BvjJqfKMnH",
          "name": "Rent Ready Supabase"
        }
      }
    }
  ],
  "connections": {
    "empty cover photo": {
      "main": [
        [
          {
            "node": "set cover photo",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "/supabase-updated-media": {
      "main": [
        [
          {
            "node": "inputs",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "new or update": {
      "main": [
        [
          {
            "node": "w: update",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "w: new",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "w: update": {
      "main": [
        [
          {
            "node": "compare",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "w: new": {
      "main": [
        [
          {
            "node": "coverPhoto & propertyId",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "inputs": {
      "main": [
        [
          {
            "node": "new or update",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "compare": {
      "main": [
        [
          {
            "node": "set_to_delete",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "set_to_delete": {
      "main": [
        [
          {
            "node": "Execute Workflow",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "coverPhoto & propertyId": {
      "main": [
        [
          {
            "node": "getProperty",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "getProperty": {
      "main": [
        [
          {
            "node": "empty cover photo",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "meta": null,
  "pinData": {
    "/supabase-updated-media": [
      {
        "json": {
          "headers": {
            "host": "s8s.up.railway.app",
            "user-agent": "pg_net/0.7.1",
            "content-length": "1339",
            "accept": "*/*",
            "authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InF5eXlhY21oY3dxZHhxbmhncW1yIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTcwMzI1NjA3MSwiZXhwIjoyMDE4ODMyMDcxfQ.SaB9Ht-q_YXbVraQSSXBONJrRq7gR7TGQ5rickZehVs",
            "content-type": "application/json",
            "x-forwarded-for": "3.210.235.210",
            "x-forwarded-host": "s8s.up.railway.app",
            "x-forwarded-proto": "https",
            "x-railway-edge": "railway/us-east4",
            "x-railway-request-id": "WEo9Fn1RTuWFd5tQFIQnSA_3118653284",
            "x-real-ip": "3.210.235.210",
            "x-request-start": "1744569028099",
            "accept-encoding": "gzip"
          },
          "params": {},
          "query": {},
          "body": {
            "type": "UPDATE",
            "table": "media",
            "record": {
              "id": 8965,
              "tag": "Property Photo",
              "size": null,
              "task_id": null,
              "media_id": null,
              "repair_id": null,
              "media_type": "image/jpeg",
              "storage_id": "7b0a8ddd-2a6b-4069-8456-92d2614d7ff2",
              "updated_by": "alex+dev@imposbl.com",
              "property_id": 653,
              "storage_url": "https://qyyyacmhcwqdxqnhgqmr.supabase.co/storage/v1/object/public/properties/8965/photos/bc6b9e8a-22f7-4ea4-ae03-fbfec2d76941.jpeg",
              "original_name": null,
              "set_to_delete": false,
              "media_url_scraped": "https://photos.zillowstatic.com/fp/593b0a617cbbd81f93747a3bfd99382d-uncropped_scaled_within_1536_1152.jpg",
              "timestamp_created": "2025-03-31T23:27:46.785574+00:00"
            },
            "schema": "public",
            "old_record": {
              "id": 8965,
              "tag": "Property Photo",
              "size": null,
              "task_id": null,
              "media_id": null,
              "repair_id": null,
              "media_type": "image/jpeg",
              "storage_id": "7b0a8ddd-2a6b-4069-8456-92d2614d7ff2",
              "updated_by": "alex+dev@imposbl.com",
              "property_id": 653,
              "storage_url": "https://qyyyacmhcwqdxqnhgqmr.supabase.co/storage/v1/object/public/properties/8965/photos/bc6b9e8a-22f7-4ea4-ae03-fbfec2d76941.jpeg",
              "original_name": null,
              "set_to_delete": true,
              "media_url_scraped": "https://photos.zillowstatic.com/fp/593b0a617cbbd81f93747a3bfd99382d-uncropped_scaled_within_1536_1152.jpg",
              "timestamp_created": "2025-03-31T23:27:46.785574+00:00"
            }
          },
          "webhookUrl": "https://s8s.up.railway.app/webhook/supabase-updated-media",
          "executionMode": "production"
        }
      }
    ]
  },
  "versionId": "de8043e3-465d-4ed8-adbe-454ca5dc7ba6",
  "triggerCount": 1,
  "tags": []
}